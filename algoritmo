

tf_listener
            serverver di trasformate
            
       
feasability_planner
            A B D F H L

            blocco posizione
            E       0
            I       1             
            C       2
            G       3
            M       4
            array-> 0: blocco nella scatola
                    1: blocco a destra x>0
                    2: blocco al centro x=0
                    3: blocco x>0
                    4: non feasible  (blocco uno sopra l'altro?)
                    non feas vuol dire che ho cubi sopra che siano rossi o blu
                    
           array_tot():        
           funzione che compili l'array da 11
                  client tf_listener
                  per ogni cubo mi restituisce la trasformata
                  B B B B B R R R R R R R
           
           distance_between_block(blocco1,blocco2):
                 calcola la distanza euclidea
                 d<lato/2:
                        se z_b1<z_b2
		               return true
		         else 
		              return false  (sto sopra)
		 else:
		        return false
                    
           main:
		    Publisher dell'array
		    client tf_listener
		    inizializzo tutti i blocchi a 4
		    pubblico
           spin:
                  for i=0:4:
                      
		              array_tot():
		              for j=0:10:
		                if  i!=j
				      bool=distance_between_block(bloccoi,bloccoj):
				      if bool=true
				            restano a 3
				            break; 
				             
			      se sono uscita dal for e ho bool=false vuol dire che sono feasible     
				      se x>0
				             blocco ->1
				             
				      se x=0
				             blocco->2
				             setto parametro true
				      se x<0
				             blocco ->3
				             
				      se (x,y)==bluebox
				             blocco->0
				             
			     pubblico l'array
                      
                      
                      
                    
sono due macchine a stati implementate nello stesso modo



PSEUDOCODE snx


        global baxter_hand
        global working
        global state
        global end
        global array 
        
       CLASSE + METODI(reaching attack detach)
       
       callback all'array
       
       callback ai joint
        
       human_collision()
              listener del frame uomo
              chiama il metodo per settare gli ostacoli dell'uomo
              working=true 
              
              
       detach_obstacle() 
             staccare gli ostacoli oomo
             working=false
       
       fsm:

           stato 0 REST leggo feas_plan 0 1 0 1 0 -> sono in rest
                   leggo l'array
                   se 00000 end=true
                   se ci sono 2 o 3
                       state=1
                   
                       
            
           stato 1 REACHING 
                   se parametro=true
                        prende blocchi con 2
                   altrimenti= sceglie il primo
                   
                   if working false:
                         human_collision()
                         go_to_pose_goal()
                             x=x cubo
                             y=y cubo
                             z=z (??)
                   else:
                         if  x e y baxter == x e y cubo:
                             detach_obstacle()
                             state=2
                                       
                         
                   
           stato 2  DISCESA
                  if working false:
                         human_collision()
                         go_to_pose_goal()
                             x=x cubo
                             y=y cubo
                             z=z cubo
                   else:
                         if  z baxter ==z cubo:
                             
                             detach_obstacle()
                             state=3
                              
           stato 3   SOLLEVAMENTO
                    if working false:
                        
                         human_collision()
                         go_to_pose_goal()
                             x=x cubo
                             y=y cubo
                             z=z cubo + qualcosa
                   else:
                         if  z baxter ==z cubo + qualcosa:
                             detach_obstacle()
                             state=4 
                             
           stato 4 RAGGIUNGO SCATOLA
                    if working false:
                         human_collision()
                         go_to_pose_goal()
                             x=x scatola + rand
                             y=y scatola
                             z=z 
                   else:
                         if  z baxter ==z cubo + qualcosa:
                             parametro=false
                             detach_obstacle()
                             state=5 
                     
           stato 5 POSO
                    if working false:
                         human_collision()
                         go_to_pose_goal()
                             x=x 
                             y=y 
                             z=0
                   else:
                         if  z baxter ==z cubo + qualcosa:
                             detach_obstacle()
                             state=0         
           
    
       
       main()
		working=false
		state=0
		end=false
		
		subscriber a /joint_baxter
		subcriber a /feas_checker
		
		
		chiedo bluebox		
		chiedo tavolo
		settati ostacolo del tavolo
		
		while end==false:
                      fsm()    

PSEUDOCODE destra

        global baxter_hand
        global working
        global state
        global end
        global array 
        
       CLASSE + METODI(reaching attack detach)
       
       callback all'array
       
       callback ai joint
        
       human_collision()
              listener del frame uomo
              chiama il metodo per settare gli ostacoli dell'uomo
              working=true 
              
              
       detach_obstacle() 
             staccare gli ostacoli oomo
             working=false
       
       fsm:

           stato 0 REST 
                   leggo l'array
                   se 00000 end=true
                   se ci sono 1 
                       state=1
                   
                       
            
           stato 1 REACHING 
                   se parametro=true
                        prende blocchi con 2
                   altrimenti= sceglie il primo
                   
                   if working false:
                         human_collision()
                         go_to_pose_goal()
                             x=x cubo
                             y=y cubo
                             z=z (??)
                   else:
                         if  x e y baxter == x e y cubo:
                             detach_obstacle()
                             state=2
                                       stato 2  DISCESA
                  if working false:
                         human_collision()
                         go_to_pose_goal()
                             x=x cubo
                             y=y cubo
                             z=z cubo
                   else:
                         if  z baxter ==z cubo:
                             
                             detach_obstacle()
                             state=3
                              
           stato 3   SOLLEVAMENTO
                    if working false:
                        
                         human_collision()
                         go_to_pose_goal()
                             x=x cubo
                             y=y cubo
                             z=z cubo + qualcosa
                   else:
                         if  z baxter ==z cubo + qualcosa && middleplacement=false:
                             detach_obstacle()
                             state=4 
                             
           stato 4 RAGGIUNGO SCATOLA
                    if working false:
                         human_collision()
                         go_to_pose_goal()
                             x=x scatola
                             y=y scatola
                             z=z 
                   else:
                         if  z baxter ==z cubo + qualcosa:
                             detach_obstacle()
                             state=5 
                     
           stato 5 POSO
                    if working false:
                         human_collision()
                         go_to_pose_goal()
                             x=x 
                             y=y 
                             z=0
                   else:
                         if  z baxter ==z cubo + qualcosa:
                             detach_obstacle()
                             state=0         
           
    
       
       main()
		working=false
		state=0
		end=false
		
		subscriber a /joint_baxter
		subcriber a /feas_checker
		
		
		chiedo middle		
		chiedo tavolo
		settati ostacolo del tavolo
		
		while end==false:
                      fsm()    
       
       
      
